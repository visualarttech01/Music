
import { Injectable } from '@angular/core';
import { Http, Headers, RequestOptions, Response } from '@angular/http';
import { InviteJob } from '../_models/invitejob';
import { AppConfig } from '../app.config';
@Injectable()
export class InviteJobService {
    // private _apiUrl = 'http://127.0.0.1:8000/invitejob/';
    // private _apiUrl = 'http://138.197.119.130/invitejob/';
    constructor(private http: Http, private _appConfig: AppConfig) { }

    getAll() {
        return this.http.get(this._appConfig.apiUrl + 'invProject/', this.jwt()).map((response: Response) => response.json());
    }

    getAllInviteProposals() {
        return this.http.get(this._appConfig.apiUrl + 'invitejob/', this.jwt()).map((response: Response) => response.json());
    }
    // getAll() {
    //     return this.http.get(this._appConfig.apiUrl + 'invitejob/', this.jwt()).map((response: Response) => response.json());
    // }

    getById(id: number) {
        return this.http.get(this._appConfig.apiUrl + 'invitejob/' + id + '/', this.jwt()).map((response: Response) => response.json());
    }
    filterForMessage(project_id: number) {
        return this.http.get(this._appConfig.apiUrl + 'invitejobmessage/' + '?project_id=' + project_id, this.jwt()).map((response: Response) => response.json());
    }
    // create(postjob: InviteJob) {
    //     // postjob.skills = JSON.stringify(postjob.skills);
    //     return this.http.post(this._appConfig.apiUrl+'invitejobupdate/', postjob, this.jwt()).map((response: Response) => response.json());
    // }
    create(postjob: InviteJob) {
        // postjob.skills = JSON.stringify(postjob.skills);
        return this.http.post(this._appConfig.apiUrl + 'invProject/', postjob, this.jwt()).map((response: Response) => response.json());
    }

    update(postjob: InviteJob) {
        // postjob.skills = JSON.stringify(postjob.skills);
        return this.http.put(this._appConfig.apiUrl + 'invitejobupdate/' + postjob.id + '/', postjob, this.jwt()).map((response: Response) => response.json());
    }

    delete(id: number) {
        return this.http.delete(this._appConfig.apiUrl + 'invitejob/' + id, this.jwt()).map((response: Response) => response.json());
    }

    // private helper methods

    private jwt() {
        // create authorization header with jwt token
        let currentUser = JSON.parse(localStorage.getItem('currentUser'));
        if (currentUser && currentUser.token) {
            let headers = new Headers({ 'Authorization': 'JWT ' + currentUser.token });
            return new RequestOptions({ headers: headers });
        }
    }
}